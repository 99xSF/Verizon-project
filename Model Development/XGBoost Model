{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "# Install Required Libraries (if necessary)\n",
        "!pip install xgboost\n",
        "\n",
        "# Import Libraries\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "import xgboost as xgb\n",
        "from sklearn.metrics import accuracy_score, classification_report\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "import pandas as pd\n",
        "from sklearn.metrics.pairwise import cosine_similarity\n",
        "\n",
        "# Load Data\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n",
        "processed_data = pd.read_csv('/content/drive/MyDrive/Verizon 1 2024-2025/Model Process/FE/processed_data.csv')\n",
        "categories_data = pd.read_csv('/content/drive/MyDrive/Verizon 1 2024-2025/categories.csv')\n",
        "sub_categories_data = pd.read_csv('/content/drive/MyDrive/Verizon 1 2024-2025/sub-categories.csv')\n",
        "\n",
        "# Assign Categories and Subcategories based on Description Matching\n",
        "product_descriptions = processed_data['Cleaned Description'].fillna('')\n",
        "category_definitions = categories_data['definition'].fillna('')\n",
        "subcategory_definitions = sub_categories_data['definition'].fillna('')\n",
        "\n",
        "# Combine descriptions for matching\n",
        "all_text = pd.concat([product_descriptions, category_definitions, subcategory_definitions], axis=0)\n",
        "\n",
        "# TF-IDF vectorizer for similarity matching\n",
        "vectorizer = TfidfVectorizer()\n",
        "tfidf_matrix = vectorizer.fit_transform(all_text)\n",
        "\n",
        "# Split TF-IDF matrix for each group\n",
        "product_matrix = tfidf_matrix[:len(product_descriptions)]\n",
        "category_matrix = tfidf_matrix[len(product_descriptions):len(product_descriptions) + len(category_definitions)]\n",
        "subcategory_matrix = tfidf_matrix[len(product_descriptions) + len(category_definitions):]\n",
        "\n",
        "# Calculate similarity and assign best match\n",
        "best_category_indices = cosine_similarity(product_matrix, category_matrix).argmax(axis=1)\n",
        "best_subcategory_indices = cosine_similarity(product_matrix, subcategory_matrix).argmax(axis=1)\n",
        "\n",
        "# Map category and subcategory names to processed_data\n",
        "processed_data['category'] = [categories_data.iloc[i]['name'] for i in best_category_indices]\n",
        "processed_data['subcategory'] = [sub_categories_data.iloc[i]['name'] for i in best_subcategory_indices]\n",
        "\n",
        "# Prepare Features and Target for Model Training\n",
        "tfidf_vectorizer = TfidfVectorizer(max_features=500)\n",
        "X = tfidf_vectorizer.fit_transform(processed_data['Cleaned Description'].fillna(''))\n",
        "label_encoder = LabelEncoder()\n",
        "y = label_encoder.fit_transform(processed_data['category'])  # Label encoding the target variable\n",
        "\n",
        "# Split data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Train the XGBoost Model\n",
        "xgb_classifier = xgb.XGBClassifier(objective='multi:softmax',\n",
        "                                   num_class=len(label_encoder.classes_),\n",
        "                                   eval_metric='mlogloss')\n",
        "xgb_classifier.fit(X_train, y_train)\n",
        "\n",
        "# Evaluate Model\n",
        "y_pred = xgb_classifier.predict(X_test)\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "classification_rep = classification_report(y_test, y_pred, target_names=label_encoder.classes_, zero_division=1)\n",
        "\n",
        "print(\"Accuracy:\", accuracy)\n",
        "print(\"Classification Report:\\n\", classification_rep)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "910vBhL5wSf2",
        "outputId": "a3ea1518-84d2-40d5-b3b9-cc5952d14ff7"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: xgboost in /usr/local/lib/python3.10/dist-packages (2.1.2)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from xgboost) (1.26.4)\n",
            "Requirement already satisfied: nvidia-nccl-cu12 in /usr/local/lib/python3.10/dist-packages (from xgboost) (2.23.4)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from xgboost) (1.13.1)\n",
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n",
            "Accuracy: 0.5953177257525084\n",
            "Classification Report:\n",
            "                                       precision    recall  f1-score   support\n",
            "\n",
            "                             AI & ML       0.67      0.71      0.69        28\n",
            "                 BI & Data Analytics       0.60      0.69      0.64        39\n",
            "      Customer Operational Platforms       0.61      0.52      0.56        21\n",
            "      Design, Development & Delivery       0.56      0.82      0.67        38\n",
            "                   Digital Workplace       0.48      0.54      0.51        26\n",
            "               Emerging Technologies       0.00      1.00      0.00         0\n",
            "                Enterprise Platforms       0.69      0.45      0.55        20\n",
            "Geographic Information Systems (GIS)       0.36      0.45      0.40        11\n",
            " IT Infrastructure Software Services       0.70      0.50      0.58        14\n",
            "             Management & Governance       0.56      0.48      0.52        29\n",
            "                Marketing Management       0.56      0.39      0.46        23\n",
            "   Performance, Monitoring & Logging       0.79      0.59      0.68        32\n",
            "          Telecom Network Management       0.63      0.67      0.65        18\n",
            "\n",
            "                            accuracy                           0.60       299\n",
            "                           macro avg       0.56      0.60      0.53       299\n",
            "                        weighted avg       0.61      0.60      0.59       299\n",
            "\n"
          ]
        }
      ]
    }
  ]
}
